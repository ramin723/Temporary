generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  fullName      String
  phone         String         @unique
  passwordHash  String
  role          UserRole
  status        String         @default("ACTIVE")
  createdAt     DateTime       @default(now())
  Mechanic      Mechanic?
  refreshTokens RefreshToken[]
  Vendor        Vendor?
}

model RefreshToken {
  id        Int       @id @default(autoincrement())
  userId    Int
  tokenHash String
  userAgent String?
  ip        String?   @db.VarChar(64)
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model Mechanic {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  code         String        @unique
  qrActive     Boolean       @default(true)
  tier         String?
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
  orders       Order[]
}

model Vendor {
  id             Int           @id @default(autoincrement())
  userId         Int           @unique
  storeName      String
  city           String?
  percentDefault Float         @default(0.05)
  status         String        @default("ACTIVE")
  createdAt      DateTime      @default(now())
  settlements    Settlement[]
  transactions   Transaction[]
  consumedOrders Order[]
  user           User          @relation(fields: [userId], references: [id])
}

model Transaction {
  id             Int             @id @default(autoincrement())
  mechanicId     Int
  vendorId       Int
  customerPhone  String
  amountTotal    Decimal         @db.Decimal(18, 0)
  amountEligible Decimal         @db.Decimal(18, 0)
  note           String?
  status         String          @default("PENDING")
  createdAt      DateTime        @default(now())
  idempotencyKey String?         @unique
  commission     Commission?
  SettlementItem SettlementItem?
  mechanic       Mechanic        @relation(fields: [mechanicId], references: [id])
  vendor         Vendor          @relation(fields: [vendorId], references: [id])
}

model Commission {
  id             Int         @id @default(autoincrement())
  transactionId  Int         @unique
  rateMechanic   Float       @default(0.03)
  ratePlatform   Float       @default(0.02)
  mechanicAmount Decimal     @db.Decimal(18, 0)
  platformAmount Decimal     @db.Decimal(18, 0)
  transaction    Transaction @relation(fields: [transactionId], references: [id])
}

model Settlement {
  id                  Int              @id @default(autoincrement())
  vendorId            Int
  status              String           @default("OPEN")
  createdAt           DateTime         @default(now())
  paidAt              DateTime?
  periodFrom          DateTime
  periodTo            DateTime
  totalAmountEligible Decimal          @default(0) @db.Decimal(18, 0)
  totalMechanicAmount Decimal          @default(0) @db.Decimal(18, 0)
  totalPlatformAmount Decimal          @default(0) @db.Decimal(18, 0)
  vendor              Vendor           @relation(fields: [vendorId], references: [id])
  items               SettlementItem[]

  @@index([vendorId, status])
}

model SettlementItem {
  id             Int         @id @default(autoincrement())
  settlementId   Int
  transactionId  Int         @unique
  mechanicAmount Decimal     @default(0) @db.Decimal(18, 0)
  platformAmount Decimal     @default(0) @db.Decimal(18, 0)
  settlement     Settlement  @relation(fields: [settlementId], references: [id])
  transaction    Transaction @relation(fields: [transactionId], references: [id])
}

model PriceCache {
  id             Int      @id @default(autoincrement())
  isacoCode      String
  title          String
  vehicleModels  String?
  retailPrice    Int?
  wholesalePrice Int?
  source         String?
  lastSeenAt     DateTime @default(now())
}

model PriceHistory {
  id        Int      @id @default(autoincrement())
  isacoCode String
  price     Int
  seenAt    DateTime @default(now())
}

enum UserRole {
  MECHANIC
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  CONSUMED
  CANCELLED
  EXPIRED
}

model Order {
  id           Int          @id @default(autoincrement())
  code         String       @unique
  mechanicId   Int
  customerPhone String
  note         String?
  status       OrderStatus  @default(PENDING)
  expiresAt    DateTime?
  createdAt    DateTime     @default(now())
  consumedAt   DateTime?
  consumedByVendorId Int?
  mechanic     Mechanic     @relation(fields: [mechanicId], references: [id], onDelete: Restrict)
  consumedByVendor Vendor?  @relation(fields: [consumedByVendorId], references: [id])
  items        OrderItem[]
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  orderId  Int
  title    String
  quantity Int    @default(1)
  note     String?
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
